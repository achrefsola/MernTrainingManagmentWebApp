const mongoose= require("mongoose");
const bcrypt = require('bcrypt');
const schema = mongoose.Schema


const userSchema= new schema({

    _id: { 
        type: mongoose.Schema.Types.ObjectId,
        auto: true 
        
        
    },
    firstname: {
        type: String,
        required: true
        
      },
      lastname: {
        type: String,
        required: true
       
      },
      email: {
        type: String,
        required: true,
        unique :true
        
       
      
      },
      phone: {
        type: Number,
        required: true
        
      },
      password: {
        type: String,
        required: true
      },
     
      speciality: {
        type: String,
        required: true
      },
      trainings: [{
        type: schema.Types.ObjectId,
        ref: 'training'
    }]
    

});
/* documentation : this code hash the password given by the user 
before saving it in the db , the process is like this :
the bcrypt.getSalt generate a seed phrase and than hash the 
password usig the method bcrypt.hash() ( the method  
parameters are the user password and the seed phrase 
generated by the bcrypt.getSalt() itself ) 
the next() method is to say that the process has ended and 
than pass to the next middleware */
userSchema.pre('save' , async function(next){
    const user = this;
    if (!user.isModified('password')) 
    return next();

    try{
        const salt = await bcrypt.genSalt();
        user.password=await bcrypt.hash(user.password,salt);
        next();
    } catch (error) {
        return next(error);
      }

    }
);
// Compare the given password with the hashed password in the database
userSchema.methods.comparePassword = async function (password) {
    return bcrypt.compare(password, this.password);
  };

  
const user = mongoose.model("user", userSchema)
module.exports=user